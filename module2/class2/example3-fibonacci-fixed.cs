using System;
using System.Collections.Generic;
using System.Diagnostics;

namespace FibonacciOtimizadoDemo
{
    class Program
    {
        // FIBONACCI OTIMIZADO - SOLU√á√ÉO DOS PROBLEMAS DE PERFORMANCE
        // Esta vers√£o demonstra m√∫ltiplas t√©cnicas de otimiza√ß√£o
        // RESULTADO: Execu√ß√£o instant√¢nea mesmo para valores grandes!

        // SOLUCAO 1: Fibonacci com Memoiza√ß√£o (Top-Down Dynamic Programming)
        // Armazena resultados j√° calculados para evitar rec√°lculos
        private static Dictionary<int, long> memoCache = new Dictionary<int, long>();

        static long FibMemoizado(int n)
        {
            // Caso base
            if (n <= 1)
            {
                return n;
            }

            // SOLUCAO: Verificar se j√° foi calculado
            if (memoCache.ContainsKey(n))
            {
                return memoCache[n];
            }

            // SOLUCAO: Calcular apenas uma vez e armazenar
            long resultado = FibMemoizado(n - 1) + FibMemoizado(n - 2);
            memoCache[n] = resultado;

            return resultado;
        }

        // SOLUCAO 2: Fibonacci Iterativo (Bottom-Up Dynamic Programming)
        // Evita recurs√£o completamente - O(n) tempo, O(1) espa√ßo
        static long FibIterativo(int n)
        {
            if (n <= 1)
            {
                return n;
            }

            // SOLUCAO: Usar apenas duas vari√°veis ao inv√©s de recurs√£o
            long anterior = 0;
            long atual = 1;

            for (int i = 2; i <= n; i++)
            {
                long proximo = anterior + atual;
                anterior = atual;
                atual = proximo;
            }

            return atual;
        }

        // SOLUCAO 3: Fibonacci com Tabela Pr√©-calculada
        // Para valores frequentemente usados, pr√©-calcular uma vez
        private static long[] tabelaFib;

        static void PreCalcularFibonacci(int maxN)
        {
            tabelaFib = new long[maxN + 1];

            if (maxN >= 0) tabelaFib[0] = 0;
            if (maxN >= 1) tabelaFib[1] = 1;

            // SOLUCAO: Calcular todos os valores de uma vez
            for (int i = 2; i <= maxN; i++)
            {
                tabelaFib[i] = tabelaFib[i - 1] + tabelaFib[i - 2];
            }
        }

        static long FibTabelado(int n)
        {
            if (n < 0 || tabelaFib == null || n >= tabelaFib.Length)
            {
                Console.WriteLine("Valor fora do range pr√©-calculado!");
                return -1;
            }

            // SOLUCAO: Acesso O(1) - instant√¢neo!
            return tabelaFib[n];
        }

        // Fun√ß√£o para comparar todas as implementa√ß√µes
        static void CompararImplementacoes()
        {
            Console.WriteLine("\n=== COMPARA√á√ÉO DE IMPLEMENTA√á√ïES ===");
            Console.WriteLine("Testando diferentes otimiza√ß√µes para Fibonacci...");

            // Pr√©-calcular tabela para teste
            Console.WriteLine("Pr√©-calculando tabela para valores at√© 50...");
            PreCalcularFibonacci(50);

            Console.WriteLine();
            Console.WriteLine("Valor | Memoizado (ms) | Iterativo (Œºs) | Tabelado (ns) | Resultado");
            Console.WriteLine("------|----------------|----------------|---------------|----------");

            for (int n = 30; n <= 45; n += 5)
            {
                // Limpar cache para teste justo da memoiza√ß√£o
                memoCache.Clear();

                // Teste Memoizado
                Stopwatch sw1 = Stopwatch.StartNew();
                long resultado1 = FibMemoizado(n);
                sw1.Stop();

                // Teste Iterativo
                Stopwatch sw2 = Stopwatch.StartNew();
                long resultado2 = FibIterativo(n);
                sw2.Stop();

                // Teste Tabelado
                Stopwatch sw3 = Stopwatch.StartNew();
                long resultado3 = FibTabelado(n);
                sw3.Stop();

                Console.WriteLine($"{n,5} | {sw1.Elapsed.TotalMilliseconds,12:F3} | {sw2.Elapsed.TotalMicroseconds,12:F1} | {sw3.ElapsedTicks * 100,11:F0} | {resultado1}");

                // Verificar se todos d√£o o mesmo resultado
                if (resultado1 != resultado2 || resultado2 != resultado3)
                {
                    Console.WriteLine("‚ùå ERRO: Resultados diferentes!");
                }
            }
        }

        // Demonstra√ß√£o de valores extremos que eram imposs√≠veis antes
        static void TesteValoresExtremos()
        {
            Console.WriteLine("\n=== TESTE DE VALORES EXTREMOS ===");
            Console.WriteLine("Valores que levariam HORAS na vers√£o recursiva original:");
            Console.WriteLine();

            // Pr√©-calcular para valores grandes
            Console.WriteLine("Pr√©-calculando tabela para valores at√© 100...");
            Stopwatch swPre = Stopwatch.StartNew();
            PreCalcularFibonacci(100);
            swPre.Stop();

            Console.WriteLine($"Pr√©-c√°lculo conclu√≠do em {swPre.Elapsed.TotalMicroseconds:F1} microssegundos!");
            Console.WriteLine();

            Console.WriteLine("Valor | Tempo (ns) | Resultado (primeiros 15 d√≠gitos)");
            Console.WriteLine("------|------------|----------------------------------");

            // Testar valores que seriam imposs√≠veis na vers√£o recursiva
            int[] valoresExtremos = { 40, 50, 60, 70, 80, 90, 100 };

            foreach (int n in valoresExtremos)
            {
                Stopwatch sw = Stopwatch.StartNew();
                long resultado = FibTabelado(n);
                sw.Stop();

                // Mostrar apenas os primeiros d√≠gitos para n√∫meros muito grandes
                string resultadoStr = resultado.ToString();
                if (resultadoStr.Length > 15)
                {
                    resultadoStr = resultadoStr.Substring(0, 15) + "...";
                }

                Console.WriteLine($"{n,5} | {sw.ElapsedTicks * 100,8:F0} | {resultadoStr}");
            }

            Console.WriteLine();
            Console.WriteLine("üöÄ INCR√çVEL: Fibonacci(100) calculado em nanossegundos!");
            Console.WriteLine("üìä Vers√£o recursiva original levaria BILH√ïES de anos!");
        }

        // An√°lise de complexidade comparativa
        static void AnaliseComplexidade()
        {
            Console.WriteLine("\n=== AN√ÅLISE DE COMPLEXIDADE ===");
            Console.WriteLine("Compara√ß√£o entre as abordagens:");
            Console.WriteLine();

            Console.WriteLine("IMPLEMENTA√á√ÉO        | COMPLEXIDADE TEMPO | COMPLEXIDADE ESPA√áO | CARACTER√çSTICAS");
            Console.WriteLine("--------------------|-------------------|--------------------|-----------------");
            Console.WriteLine("Recursiva Original  | O(2^n) - Exponencial | O(n) - Stack      | CATASTR√ìFICO");
            Console.WriteLine("Memoizada (Top-Down)| O(n) - Linear        | O(n) - Cache      | Boa para poucos valores");
            Console.WriteLine("Iterativa (Bottom-Up)| O(n) - Linear       | O(1) - Constante  | Melhor para valor √∫nico");
            Console.WriteLine("Tabelada (Pre-calc) | O(1) - Constante     | O(n) - Tabela     | Melhor para m√∫ltiplos valores");
            Console.WriteLine();

            Console.WriteLine("EXEMPLO PR√ÅTICO:");
            Console.WriteLine("Para calcular Fibonacci(40):");
            Console.WriteLine("- Recursiva: ~1.664.079.648 chamadas de fun√ß√£o (minutos)");
            Console.WriteLine("- Memoizada: ~40 chamadas de fun√ß√£o (microssegundos)");
            Console.WriteLine("- Iterativa: ~40 itera√ß√µes simples (nanossegundos)");
            Console.WriteLine("- Tabelada: ~1 acesso √† array (nanossegundos)");
        }

        // Demonstra√ß√£o de benchmark detalhado
        static void BenchmarkDetalhado()
        {
            Console.WriteLine("\n=== BENCHMARK DETALHADO ===");
            Console.WriteLine("Medindo performance precisa para diferentes valores:");
            Console.WriteLine();

            PreCalcularFibonacci(50);

            Console.WriteLine("N   | Recursiva (estimativa) | Memoizada | Iterativa | Tabelada | Speedup vs Recursiva");
            Console.WriteLine("----|------------------------|-----------|-----------|----------|--------------------");

            for (int n = 20; n <= 45; n += 5)
            {
                // Estimativa do tempo recursivo baseado em O(2^n)
                double tempoRecursivoEstimado = Math.Pow(2, n) / 1000000.0; // Estimativa em segundos

                memoCache.Clear();

                // Memoizada
                Stopwatch swMemo = Stopwatch.StartNew();
                long resultMemo = FibMemoizado(n);
                swMemo.Stop();

                // Iterativa
                Stopwatch swIter = Stopwatch.StartNew();
                long resultIter = FibIterativo(n);
                swIter.Stop();

                // Tabelada
                Stopwatch swTab = Stopwatch.StartNew();
                long resultTab = FibTabelado(n);
                swTab.Stop();

                double speedup = tempoRecursivoEstimada / Math.Max(swTab.Elapsed.TotalSeconds, 0.000001);

                Console.WriteLine($"{n,3} | {tempoRecursivoEstimado,18:F6}s | {swMemo.Elapsed.TotalMicroseconds,7:F1}Œºs | {swIter.Elapsed.TotalMicroseconds,7:F1}Œºs | {swTab.ElapsedTicks * 100,6:F0}ns | {speedup,15:E2}x");
            }

            Console.WriteLine();
            Console.WriteLine("üìà Observe como o speedup cresce exponencialmente!");
        }

        // Fun√ß√£o principal de demonstra√ß√£o
        static void ExecutarDemonstracao()
        {
            Console.WriteLine("=== FIBONACCI OTIMIZADO - SOLU√á√ïES DE PERFORMANCE ===");
            Console.WriteLine("Objetivo: Demonstrar como otimiza√ß√µes algor√≠tmicas resolvem problemas de performance");
            Console.WriteLine();

            Console.WriteLine("OTIMIZA√á√ïES IMPLEMENTADAS:");
            Console.WriteLine("‚úÖ MEMOIZA√á√ÉO: Evita rec√°lculos desnecess√°rios");
            Console.WriteLine("‚úÖ ITERA√á√ÉO: Elimina overhead de recurs√£o");
            Console.WriteLine("‚úÖ PR√â-C√ÅLCULO: Acesso instant√¢neo O(1)");
            Console.WriteLine("‚úÖ OTIMIZA√á√ÉO DE ESPA√áO: M√≠nimo uso de mem√≥ria");
            Console.WriteLine();

            Console.WriteLine("COMPARA√á√ÉO COM VERS√ÉO ORIGINAL:");
            Console.WriteLine("- Fibonacci(40) original: ~90 minutos");
            Console.WriteLine("- Fibonacci(40) otimizado: <1 microssegundo");
            Console.WriteLine("- Melhoria: >5.000.000.000x mais r√°pido!");
            Console.WriteLine();

            Console.WriteLine("Pressione ENTER para iniciar as demonstra√ß√µes...");
            Console.ReadLine();
            Console.WriteLine();

            // Executar todas as demonstra√ß√µes
            CompararImplementacoes();
            TesteValoresExtremos();
            BenchmarkDetalhado();
            AnaliseComplexidade();
        }

        // Teste interativo para compara√ß√£o direta
        static void TesteInterativo()
        {
            Console.WriteLine("\n=== TESTE INTERATIVO ===");
            Console.WriteLine("Digite valores para testar as implementa√ß√µes otimizadas:");

            PreCalcularFibonacci(100);

            while (true)
            {
                Console.Write("\nDigite um n√∫mero (0-100, ou 'q' para sair): ");
                string input = Console.ReadLine();

                if (input?.ToLower() == "q")
                    break;

                if (int.TryParse(input, out int n) && n >= 0 && n <= 100)
                {
                    memoCache.Clear();

                    Console.WriteLine($"\nCalculando Fibonacci({n}):");

                    // Todas as implementa√ß√µes
                    Stopwatch sw = Stopwatch.StartNew();
                    long resultMemo = FibMemoizado(n);
                    sw.Stop();
                    Console.WriteLine($"Memoizada:  {resultMemo} (tempo: {sw.Elapsed.TotalMicroseconds:F1} Œºs)");

                    sw.Restart();
                    long resultIter = FibIterativo(n);
                    sw.Stop();
                    Console.WriteLine($"Iterativa:  {resultIter} (tempo: {sw.Elapsed.TotalMicroseconds:F1} Œºs)");

                    sw.Restart();
                    long resultTab = FibTabelado(n);
                    sw.Stop();
                    Console.WriteLine($"Tabelada:   {resultTab} (tempo: {sw.ElapsedTicks * 100:F0} ns)");

                    // Estimativa do tempo que levaria na vers√£o recursiva
                    if (n <= 45)
                    {
                        double tempoEstimado = Math.Pow(2, n) / 1000000.0;
                        Console.WriteLine($"Recursiva (estimativa): {tempoEstimado:F6} segundos");
                    }
                    else
                    {
                        Console.WriteLine("Recursiva: IMPOSS√çVEL (levaria anos)");
                    }
                }
                else
                {
                    Console.WriteLine("Por favor, digite um n√∫mero v√°lido entre 0 e 100.");
                }
            }
        }

        static void Main(string[] args)
        {
            try
            {
                Console.WriteLine("FIBONACCI OTIMIZADO - VERS√ÉO DE ALTA PERFORMANCE");
                Console.WriteLine("================================================");
                Console.WriteLine();

                // Demonstra√ß√£o principal
                ExecutarDemonstracao();

                // Teste interativo opcional
                Console.WriteLine("\nDeseja executar teste interativo? (s/n)");
                string resposta = Console.ReadLine();

                if (resposta?.ToLower().StartsWith("s") == true)
                {
                    TesteInterativo();
                }

                Console.WriteLine();
                Console.WriteLine("=== RESULTADOS PARA PROFILING ===");
                Console.WriteLine("DIFEREN√áAS NO PROFILER:");
                Console.WriteLine("‚úì SEM HOTSPOTS: CPU distribu√≠do equilibradamente");
                Console.WriteLine("‚úì POUCAS CHAMADAS: Elimina√ß√£o da recurs√£o excessiva");
                Console.WriteLine("‚úì TEMPO M√çNIMO: Execu√ß√£o quase instant√¢nea");
                Console.WriteLine("‚úì CALL TREE SIMPLES: Sem profundidade recursiva");
                Console.WriteLine();

                Console.WriteLine("LI√á√ïES APRENDIDAS:");
                Console.WriteLine("1. ALGORITMO > HARDWARE: Otimiza√ß√£o algor√≠tmica supera for√ßa bruta");
                Console.WriteLine("2. COMPLEXIDADE IMPORTA: O(2^n) vs O(n) vs O(1) fazem diferen√ßa dram√°tica");
                Console.WriteLine("3. TRADE-OFFS: Espa√ßo vs Tempo vs Simplicidade");
                Console.WriteLine("4. PROFILING GUIA: Identifica gargalos para otimiza√ß√£o direcionada");
                Console.WriteLine();

                Console.WriteLine("PR√ìXIMOS PASSOS:");
                Console.WriteLine("‚úì Compare o profiler desta vers√£o com example3-fibonacci.cs");
                Console.WriteLine("‚úì Observe a diferen√ßa no call tree e hotspots");
                Console.WriteLine("‚úì Analise como otimiza√ß√µes mudam o perfil de CPU");
                Console.WriteLine("‚úì Discuta quando usar cada t√©cnica de otimiza√ß√£o");

            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro durante execu√ß√£o: {ex.Message}");
                Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            }

            Console.WriteLine("\nPressione qualquer tecla para sair...");
            Console.ReadKey();
        }
    }
}
