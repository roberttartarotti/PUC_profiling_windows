#include <iostream>
#include <chrono>
#include <iomanip>
#include <vector>

// FUN√á√ÉO RECURSIVA FIBONACCI - PROBLEMA CR√çTICO DE PERFORMANCE
// Esta implementa√ß√£o demonstra o pior caso de recurs√£o para profiling
// ATEN√á√ÉO: Consumir√° 100% do CPU por v√°rios minutos!

// Fibonacci recursivo puro - EXTREMAMENTE INEFICIENTE
// Esta fun√ß√£o ser√° o principal alvo do sampling profiler
long long fib(int n) {
    // Caso base - condi√ß√µes de parada da recurs√£o
    if (n <= 1) {
        return n;
    }
    
    // PROBLEMA: Chamadas recursivas redundantes
    // Cada chamada gera duas novas chamadas, criando uma √°rvore exponencial
    // fib(n) = fib(n-1) + fib(n-2)
    // Complexidade: O(2^n) - CATASTR√ìFICO!
    return fib(n - 1) + fib(n - 2);
}

// Fun√ß√£o auxiliar para demonstrar m√∫ltiplas chamadas recursivas
// Ser√° vis√≠vel no call tree do profiler
long long fibonacciMultiplo(int inicio, int fim) {
    long long soma = 0;
    
    std::cout << "Calculando Fibonacci de " << inicio << " at√© " << fim << "..." << std::endl;
    
    // Loop que chama fibonacci para v√°rios valores
    // Cada valor gerar√° uma √°rvore de recurs√£o exponencial
    for (int i = inicio; i <= fim; ++i) {
        std::cout << "  Calculando fib(" << i << ")..." << std::endl;
        
        auto inicioTempo = std::chrono::high_resolution_clock::now();
        long long resultado = fib(i);
        auto fimTempo = std::chrono::high_resolution_clock::now();
        
        auto duracao = std::chrono::duration_cast<std::chrono::milliseconds>(fimTempo - inicioTempo);
        
        std::cout << "    fib(" << i << ") = " << resultado 
                  << " (tempo: " << duracao.count() << " ms)" << std::endl;
        
        soma += resultado;
    }
    
    return soma;
}

// Fun√ß√£o para demonstrar diferentes padr√µes de chamada recursiva
void demonstrarPadroesRecursivos() {
    std::cout << "\n=== DEMONSTRA√á√ÉO DE PADR√ïES RECURSIVOS ===" << std::endl;
    std::cout << "Testando diferentes valores para an√°lise do call tree..." << std::endl;
    
    // Valores pequenos para warm-up
    std::cout << "\n1. AQUECIMENTO - Valores pequenos:" << std::endl;
    for (int i = 1; i <= 10; ++i) {
        std::cout << "fib(" << i << ") = " << fib(i) << std::endl;
    }
    
    // Valores m√©dios - come√ßam a mostrar o problema
    std::cout << "\n2. VALORES M√âDIOS - Problema come√ßa a aparecer:" << std::endl;
    fibonacciMultiplo(20, 25);
    
    // Valores altos - PROBLEMA CR√çTICO
    std::cout << "\n3. VALORES ALTOS - PROBLEMA CR√çTICO DE PERFORMANCE:" << std::endl;
    std::cout << "‚ö†Ô∏è ATEN√á√ÉO: Os pr√≥ximos c√°lculos levar√£o MUITO tempo!" << std::endl;
    fibonacciMultiplo(30, 35);
}

// Fun√ß√£o principal de demonstra√ß√£o
void executarDemonstracao() {
    std::cout << "=== DEMONSTRA√á√ÉO DE PROFILING - FIBONACCI RECURSIVO ===" << std::endl;
    std::cout << "Objetivo: Analisar performance de fun√ß√µes recursivas com sampling profiler" << std::endl;
    std::cout << std::endl;
    
    std::cout << "CARACTER√çSTICAS DESTA DEMONSTRA√á√ÉO:" << std::endl;
    std::cout << "‚úì Recurs√£o exponencial O(2^n) - pior caso poss√≠vel" << std::endl;
    std::cout << "‚úì Milh√µes de chamadas de fun√ß√£o para an√°lise" << std::endl;
    std::cout << "‚úì Call tree profundo para visualiza√ß√£o" << std::endl;
    std::cout << "‚úì Tempo de execu√ß√£o crescente exponencialmente" << std::endl;
    std::cout << std::endl;
    
    std::cout << "AN√ÅLISE ESPERADA NO PROFILER:" << std::endl;
    std::cout << "1. Fun√ß√£o 'fib()' dominar√° 95%+ do tempo de CPU" << std::endl;
    std::cout << "2. Call tree mostrar√° profundidade e ramifica√ß√µes" << std::endl;
    std::cout << "3. N√∫mero de chamadas crescer√° exponencialmente" << std::endl;
    std::cout << "4. Sampling capturar√° padr√£o recursivo claramente" << std::endl;
    std::cout << std::endl;
    
    std::cout << "CONFIGURA√á√ÉO DO PROBLEMA:" << std::endl;
    std::cout << "- Algoritmo: Fibonacci recursivo puro (sem memoiza√ß√£o)" << std::endl;
    std::cout << "- Complexidade: O(2^n) - exponencial" << std::endl;
    std::cout << "- Valores testados: 1 a 35" << std::endl;
    std::cout << "- Tempo estimado: 5-15 minutos dependendo do hardware" << std::endl;
    std::cout << std::endl;
    
    std::cout << "LIMITA√á√ïES DO SAMPLING:" << std::endl;
    std::cout << "‚ö†Ô∏è Fun√ß√µes muito r√°pidas podem n√£o ser capturadas" << std::endl;
    std::cout << "‚ö†Ô∏è Sampling rate pode perder chamadas individuais" << std::endl;
    std::cout << "‚úÖ MAS: Padr√£o geral ser√° claramente vis√≠vel" << std::endl;
    std::cout << std::endl;
    
    std::cout << "Pressione ENTER para iniciar a demonstra√ß√£o..." << std::endl;
    std::cin.get();
    std::cout << std::endl;
    
    auto inicioTotal = std::chrono::high_resolution_clock::now();
    
    // Executar demonstra√ß√£o completa
    demonstrarPadroesRecursivos();
    
    auto fimTotal = std::chrono::high_resolution_clock::now();
    auto duracaoTotal = std::chrono::duration_cast<std::chrono::seconds>(fimTotal - inicioTotal);
    
    std::cout << std::endl;
    std::cout << "=== RESULTADOS FINAIS ===" << std::endl;
    std::cout << "Tempo Total de Execu√ß√£o: " << duracaoTotal.count() << " segundos" << std::endl;
    std::cout << std::endl;
    
    std::cout << "AN√ÅLISE PARA PROFILING:" << std::endl;
    std::cout << "1. HOTSPOT PRINCIPAL: fun√ß√£o fib() consumiu maior parte do tempo" << std::endl;
    std::cout << "2. CALL TREE: Visualize a profundidade das chamadas recursivas" << std::endl;
    std::cout << "3. SAMPLING RATE: Observe como o profiler capturou as chamadas" << std::endl;
    std::cout << "4. PERFORMANCE PATTERN: Tempo cresce exponencialmente com n" << std::endl;
    std::cout << std::endl;
    
    std::cout << "PR√ìXIMOS PASSOS:" << std::endl;
    std::cout << "‚úì Salve o relat√≥rio do profiler para compara√ß√£o futura" << std::endl;
    std::cout << "‚úì Analise o call tree para entender a recurs√£o" << std::endl;
    std::cout << "‚úì Compare com vers√£o otimizada (memoiza√ß√£o/iterativa)" << std::endl;
    std::cout << "‚úì Discuta limita√ß√µes do sampling em fun√ß√µes curtas" << std::endl;
}

// Fun√ß√£o adicional para testar valores extremos (OPCIONAL)
void testeExtremoPerigosoFibonacci() {
    std::cout << "\nüî• TESTE EXTREMO - APENAS PARA DEMONSTRA√á√ÉO AVAN√áADA üî•" << std::endl;
    std::cout << "‚ö†Ô∏è ATEN√á√ÉO: Isso pode levar 30+ minutos para completar!" << std::endl;
    std::cout << "Deseja calcular Fibonacci de valores ainda maiores? (s/n): ";
    
    char resposta;
    std::cin >> resposta;
    
    if (resposta == 's' || resposta == 'S') {
        std::cout << "üö® √öLTIMA CHANCE DE CANCELAR!" << std::endl;
        std::cout << "Pressione ENTER para continuar ou Ctrl+C para cancelar..." << std::endl;
        std::cin.ignore();
        std::cin.get();
        
        std::cout << "\nüíÄ CALCULANDO FIBONACCI EXTREMO..." << std::endl;
        
        // Valores que realmente v√£o torturar o CPU
        for (int i = 36; i <= 40; ++i) {
            std::cout << "\nCalculando fib(" << i << ") - Prepare-se para esperar..." << std::endl;
            
            auto inicio = std::chrono::high_resolution_clock::now();
            long long resultado = fib(i);
            auto fim = std::chrono::high_resolution_clock::now();
            
            auto duracao = std::chrono::duration_cast<std::chrono::seconds>(fim - inicio);
            
            std::cout << "fib(" << i << ") = " << resultado 
                      << " (tempo: " << duracao.count() << " segundos)" << std::endl;
        }
        
        std::cout << "\nüéØ TESTE EXTREMO CONCLU√çDO!" << std::endl;
        std::cout << "O profiler deve mostrar dados MUITO claros agora!" << std::endl;
    }
}

int main() {
    try {
        std::cout << "DEMONSTRA√á√ÉO DE PROFILING - FIBONACCI RECURSIVO" << std::endl;
        std::cout << "===============================================" << std::endl;
        std::cout << std::endl;
        
        // Demonstra√ß√£o principal
        executarDemonstracao();
        
        // Teste opcional extremo
        testeExtremoPerigosoFibonacci();
        
        std::cout << std::endl;
        std::cout << "INSTRU√á√ïES FINAIS PARA PROFILING:" << std::endl;
        std::cout << "1. No Visual Studio: Debug -> Performance Profiler" << std::endl;
        std::cout << "2. Selecione 'CPU Usage' (sampling profiler)" << std::endl;
        std::cout << "3. Execute e observe:" << std::endl;
        std::cout << "   - Fun√ß√£o fib() como hotspot principal" << std::endl;
        std::cout << "   - Call tree com profundidade recursiva" << std::endl;
        std::cout << "   - N√∫mero total de chamadas de fun√ß√£o" << std::endl;
        std::cout << "   - Distribui√ß√£o de tempo por fun√ß√£o" << std::endl;
        std::cout << "4. Compare com implementa√ß√£o otimizada futura" << std::endl;
        
    } catch (const std::exception& e) {
        std::cerr << "Erro durante execu√ß√£o: " << e.what() << std::endl;
        return 1;
    }
    
    std::cout << std::endl << "Pressione qualquer tecla para sair..." << std::endl;
    std::cin.ignore();
    std::cin.get();
    
    return 0;
}
