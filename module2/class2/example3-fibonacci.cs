using System;
using System.Diagnostics;

namespace FibonacciRecursivoDemo
{
    class Program
    {
        // FUN√á√ÉO RECURSIVA FIBONACCI - PROBLEMA CR√çTICO DE PERFORMANCE
        // Esta implementa√ß√£o demonstra o pior caso de recurs√£o para profiling
        // ATEN√á√ÉO: Consumir√° 100% do CPU por v√°rios minutos!

        // Fibonacci recursivo puro - EXTREMAMENTE INEFICIENTE
        // Esta fun√ß√£o ser√° o principal alvo do sampling profiler
        static long Fib(int n)
        {
            // Caso base - condi√ß√µes de parada da recurs√£o
            if (n <= 1)
            {
                return n;
            }
            
            // PROBLEMA: Chamadas recursivas redundantes
            // Cada chamada gera duas novas chamadas, criando uma √°rvore exponencial
            // Fib(n) = Fib(n-1) + Fib(n-2)
            // Complexidade: O(2^n) - CATASTR√ìFICO!
            return Fib(n - 1) + Fib(n - 2);
        }

        // Fun√ß√£o auxiliar para demonstrar m√∫ltiplas chamadas recursivas
        // Ser√° vis√≠vel no call tree do profiler
        static long FibonacciMultiplo(int inicio, int fim)
        {
            long soma = 0;
            
            Console.WriteLine($"Calculando Fibonacci de {inicio} at√© {fim}...");
            
            // Loop que chama fibonacci para v√°rios valores
            // Cada valor gerar√° uma √°rvore de recurs√£o exponencial
            for (int i = inicio; i <= fim; i++)
            {
                Console.WriteLine($"  Calculando Fib({i})...");
                
                Stopwatch stopwatch = Stopwatch.StartNew();
                long resultado = Fib(i);
                stopwatch.Stop();
                
                Console.WriteLine($"    Fib({i}) = {resultado} (tempo: {stopwatch.ElapsedMilliseconds} ms)");
                
                soma += resultado;
            }
            
            return soma;
        }

        // Fun√ß√£o para demonstrar diferentes padr√µes de chamada recursiva
        static void DemonstrarPadroesRecursivos()
        {
            Console.WriteLine("\n=== DEMONSTRA√á√ÉO DE PADR√ïES RECURSIVOS ===");
            Console.WriteLine("Testando diferentes valores para an√°lise do call tree...");
            
            // Valores pequenos para warm-up
            Console.WriteLine("\n1. AQUECIMENTO - Valores pequenos:");
            for (int i = 1; i <= 10; i++)
            {
                Console.WriteLine($"Fib({i}) = {Fib(i)}");
            }
            
            // Valores m√©dios - come√ßam a mostrar o problema
            Console.WriteLine("\n2. VALORES M√âDIOS - Problema come√ßa a aparecer:");
            FibonacciMultiplo(20, 25);
            
            // Valores altos - PROBLEMA CR√çTICO
            Console.WriteLine("\n3. VALORES ALTOS - PROBLEMA CR√çTICO DE PERFORMANCE:");
            Console.WriteLine("‚ö†Ô∏è ATEN√á√ÉO: Os pr√≥ximos c√°lculos levar√£o MUITO tempo!");
            FibonacciMultiplo(30, 35);
        }

        // Fun√ß√£o principal de demonstra√ß√£o
        static void ExecutarDemonstracao()
        {
            Console.WriteLine("=== DEMONSTRA√á√ÉO DE PROFILING - FIBONACCI RECURSIVO ===");
            Console.WriteLine("Objetivo: Analisar performance de fun√ß√µes recursivas com sampling profiler");
            Console.WriteLine();
            
            Console.WriteLine("CARACTER√çSTICAS DESTA DEMONSTRA√á√ÉO:");
            Console.WriteLine("‚úì Recurs√£o exponencial O(2^n) - pior caso poss√≠vel");
            Console.WriteLine("‚úì Milh√µes de chamadas de fun√ß√£o para an√°lise");
            Console.WriteLine("‚úì Call tree profundo para visualiza√ß√£o");
            Console.WriteLine("‚úì Tempo de execu√ß√£o crescente exponencialmente");
            Console.WriteLine();
            
            Console.WriteLine("AN√ÅLISE ESPERADA NO PROFILER:");
            Console.WriteLine("1. Fun√ß√£o 'Fib()' dominar√° 95%+ do tempo de CPU");
            Console.WriteLine("2. Call tree mostrar√° profundidade e ramifica√ß√µes");
            Console.WriteLine("3. N√∫mero de chamadas crescer√° exponencialmente");
            Console.WriteLine("4. Sampling capturar√° padr√£o recursivo claramente");
            Console.WriteLine();
            
            Console.WriteLine("CONFIGURA√á√ÉO DO PROBLEMA:");
            Console.WriteLine("- Algoritmo: Fibonacci recursivo puro (sem memoiza√ß√£o)");
            Console.WriteLine("- Complexidade: O(2^n) - exponencial");
            Console.WriteLine("- Valores testados: 1 a 35");
            Console.WriteLine("- Tempo estimado: 5-15 minutos dependendo do hardware");
            Console.WriteLine();
            
            Console.WriteLine("LIMITA√á√ïES DO SAMPLING:");
            Console.WriteLine("‚ö†Ô∏è Fun√ß√µes muito r√°pidas podem n√£o ser capturadas");
            Console.WriteLine("‚ö†Ô∏è Sampling rate pode perder chamadas individuais");
            Console.WriteLine("‚úÖ MAS: Padr√£o geral ser√° claramente vis√≠vel");
            Console.WriteLine();
            
            Console.WriteLine("Pressione ENTER para iniciar a demonstra√ß√£o...");
            Console.ReadLine();
            Console.WriteLine();
            
            Stopwatch stopwatchTotal = Stopwatch.StartNew();
            
            // Executar demonstra√ß√£o completa
            DemonstrarPadroesRecursivos();
            
            stopwatchTotal.Stop();
            
            Console.WriteLine();
            Console.WriteLine("=== RESULTADOS FINAIS ===");
            Console.WriteLine($"Tempo Total de Execu√ß√£o: {stopwatchTotal.ElapsedMilliseconds / 1000} segundos");
            Console.WriteLine();
            
            Console.WriteLine("AN√ÅLISE PARA PROFILING:");
            Console.WriteLine("1. HOTSPOT PRINCIPAL: fun√ß√£o Fib() consumiu maior parte do tempo");
            Console.WriteLine("2. CALL TREE: Visualize a profundidade das chamadas recursivas");
            Console.WriteLine("3. SAMPLING RATE: Observe como o profiler capturou as chamadas");
            Console.WriteLine("4. PERFORMANCE PATTERN: Tempo cresce exponencialmente com n");
            Console.WriteLine();
            
            Console.WriteLine("PR√ìXIMOS PASSOS:");
            Console.WriteLine("‚úì Salve o relat√≥rio do profiler para compara√ß√£o futura");
            Console.WriteLine("‚úì Analise o call tree para entender a recurs√£o");
            Console.WriteLine("‚úì Compare com vers√£o otimizada (memoiza√ß√£o/iterativa)");
            Console.WriteLine("‚úì Discuta limita√ß√µes do sampling em fun√ß√µes curtas");
        }

        // Fun√ß√£o adicional para testar valores extremos (OPCIONAL)
        static void TesteExtremoPerigosoFibonacci()
        {
            Console.WriteLine("\nüî• TESTE EXTREMO - APENAS PARA DEMONSTRA√á√ÉO AVAN√áADA üî•");
            Console.WriteLine("‚ö†Ô∏è ATEN√á√ÉO: Isso pode levar 30+ minutos para completar!");
            Console.Write("Deseja calcular Fibonacci de valores ainda maiores? (s/n): ");
            
            string resposta = Console.ReadLine();
            
            if (resposta?.ToLower().StartsWith("s") == true)
            {
                Console.WriteLine("üö® √öLTIMA CHANCE DE CANCELAR!");
                Console.WriteLine("Pressione ENTER para continuar ou feche a janela para cancelar...");
                Console.ReadLine();
                
                Console.WriteLine("\nüíÄ CALCULANDO FIBONACCI EXTREMO...");
                
                // Valores que realmente v√£o torturar o CPU
                for (int i = 36; i <= 40; i++)
                {
                    Console.WriteLine($"\nCalculando Fib({i}) - Prepare-se para esperar...");
                    
                    Stopwatch stopwatch = Stopwatch.StartNew();
                    long resultado = Fib(i);
                    stopwatch.Stop();
                    
                    Console.WriteLine($"Fib({i}) = {resultado} (tempo: {stopwatch.ElapsedMilliseconds / 1000} segundos)");
                }
                
                Console.WriteLine("\nüéØ TESTE EXTREMO CONCLU√çDO!");
                Console.WriteLine("O profiler deve mostrar dados MUITO claros agora!");
            }
        }

        // Fun√ß√£o adicional para an√°lise comparativa de complexidade
        static void AnaliseComparativaComplexidade()
        {
            Console.WriteLine("\n=== AN√ÅLISE COMPARATIVA DE COMPLEXIDADE ===");
            Console.WriteLine("Demonstrando como o tempo cresce exponencialmente:");
            Console.WriteLine();
            
            Console.WriteLine("Valor | Tempo (ms) | Chamadas Estimadas | Crescimento");
            Console.WriteLine("------|------------|-------------------|------------");
            
            for (int n = 25; n <= 35; n++)
            {
                Stopwatch sw = Stopwatch.StartNew();
                long resultado = Fib(n);
                sw.Stop();
                
                // Estimativa do n√∫mero de chamadas: aproximadamente 2^n
                long chamadasEstimadas = (long)Math.Pow(2, n);
                
                Console.WriteLine($"{n,5} | {sw.ElapsedMilliseconds,10} | {chamadasEstimadas,17:N0} | {(n > 25 ? (double)sw.ElapsedMilliseconds / 1 : 1):F1}x");
                
                // Parar se estiver levando muito tempo
                if (sw.ElapsedMilliseconds > 10000) // Mais de 10 segundos
                {
                    Console.WriteLine("‚ö†Ô∏è Interrompendo an√°lise - tempo excessivo detectado");
                    break;
                }
            }
            
            Console.WriteLine();
            Console.WriteLine("OBSERVA√á√ïES PARA PROFILING:");
            Console.WriteLine("- Cada incremento em 'n' dobra aproximadamente o tempo");
            Console.WriteLine("- N√∫mero de chamadas cresce exponencialmente");
            Console.WriteLine("- Profiler capturar√° este padr√£o claramente");
            Console.WriteLine("- Call tree mostrar√° a √°rvore de recurs√£o");
        }

        static void Main(string[] args)
        {
            try
            {
                Console.WriteLine("DEMONSTRA√á√ÉO DE PROFILING - FIBONACCI RECURSIVO");
                Console.WriteLine("===============================================");
                Console.WriteLine();
                
                // Demonstra√ß√£o principal
                ExecutarDemonstracao();
                
                // An√°lise comparativa opcional
                Console.WriteLine("\nDeseja executar an√°lise comparativa de complexidade? (s/n)");
                string respostaAnalise = Console.ReadLine();
                
                if (respostaAnalise?.ToLower().StartsWith("s") == true)
                {
                    AnaliseComparativaComplexidade();
                }
                
                // Teste opcional extremo
                TesteExtremoPerigosoFibonacci();
                
                Console.WriteLine();
                Console.WriteLine("INSTRU√á√ïES FINAIS PARA PROFILING:");
                Console.WriteLine("1. No Visual Studio: Debug -> Performance Profiler");
                Console.WriteLine("2. Selecione 'CPU Usage' (sampling profiler)");
                Console.WriteLine("3. Execute e observe:");
                Console.WriteLine("   - Fun√ß√£o Fib() como hotspot principal");
                Console.WriteLine("   - Call tree com profundidade recursiva");
                Console.WriteLine("   - N√∫mero total de chamadas de fun√ß√£o");
                Console.WriteLine("   - Distribui√ß√£o de tempo por fun√ß√£o");
                Console.WriteLine("4. Compare com implementa√ß√£o otimizada futura");
                Console.WriteLine();
                
                Console.WriteLine("PONTOS DE DISCUSS√ÉO:");
                Console.WriteLine("‚úì Por que o sampling profiler √© ideal para fun√ß√µes recursivas?");
                Console.WriteLine("‚úì Como interpretar o call tree em recurs√µes profundas?");
                Console.WriteLine("‚úì Limita√ß√µes do sampling em fun√ß√µes muito r√°pidas");
                Console.WriteLine("‚úì Diferen√ßa entre tempo exclusivo vs. inclusivo");
                Console.WriteLine("‚úì Como identificar padr√µes de recurs√£o ineficiente");
                
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro durante execu√ß√£o: {ex.Message}");
                Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            }
            
            Console.WriteLine("\nPressione qualquer tecla para sair...");
            Console.ReadKey();
        }
    }
}
