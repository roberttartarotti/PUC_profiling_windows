/*
 * Exemplo 2 - Vazamento de Mem√≥ria (Memory Leak) - PROBLEMA
 * 
 * NOTA: Este c√≥digo √© fornecido apenas para fins de demonstra√ß√£o. Ele cont√©m 
 * intencionalmente problemas de vazamento de mem√≥ria para auxiliar na 
 * demonstra√ß√£o de profiling de performance e detec√ß√£o de memory leaks.
 * 
 * Objetivo do Exerc√≠cio:
 * Este exemplo demonstra problemas comuns de vazamento de mem√≥ria em C#.
 * Vamos criar um programa interativo que permite testar diferentes cen√°rios
 * onde o Garbage Collector n√£o consegue liberar mem√≥ria adequadamente.
 * 
 * O que vamos fazer:
 * 1. Criar uma classe que mant√©m refer√™ncias est√°ticas impedindo coleta pelo GC
 * 2. Demonstrar vazamento atrav√©s de cole√ß√µes est√°ticas que crescem indefinidamente
 * 3. Mostrar vazamento de handles de arquivo sem usar using statements
 * 4. Usar interface interativa para testar diferentes cen√°rios
 * 5. Observar como objetos ficam "presos" na mem√≥ria usando ferramentas de profiling
 * 
 * Comandos dispon√≠veis:
 * - bad memory: Cria 1000 objetos que ficam presos em lista est√°tica
 * - bad file: Abre 100 arquivos sem liberar handles adequadamente
 * - force collection: For√ßa execu√ß√£o do GC para demonstrar que objetos n√£o s√£o coletados
 * - clear files: Limpa arquivos de teste criados
 * 
 * Problemas demonstrados:
 * - Lista est√°tica mant√©m refer√™ncias vivas impedindo coleta pelo GC
 * - FileStream e StreamWriter criados sem using statements
 * - Objetos acumulam indefinidamente na mem√≥ria mesmo ap√≥s force GC
 * - Handles de arquivo n√£o liberados causando "arquivo em uso por outro processo"
 * 
 * Como usar este exemplo:
 * 1. Compile e execute o programa
 * 2. Use ferramentas de profiling (.NET Diagnostic Tools, PerfView, dotMemory)
 * 3. Execute "bad memory" m√∫ltiplas vezes e observe o crescimento da mem√≥ria
 * 4. Execute "force collection" e note que a mem√≥ria n√£o diminui
 * 5. Execute "bad file" e tente acessar os arquivos externamente
 * 
 * Ferramentas recomendadas para an√°lise:
 * - Visual Studio: Diagnostic Tools (Debug ‚Üí Windows ‚Üí Show Diagnostic Tools)
 * - JetBrains dotMemory: Profiler dedicado para mem√≥ria .NET
 * - PerfView: Ferramenta gratuita da Microsoft para an√°lise ETW
 * - Application Insights: Para monitoramento em produ√ß√£o
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;

namespace MemoryLeakDemo
{
    // PROBLEMA: Esta classe mant√©m refer√™ncias est√°ticas que nunca s√£o limpas
    // Isso impede que o Garbage Collector libere os objetos
    internal class DataProcessor
    {
        private int[] data;
        
        // PROBLEMA CR√çTICO: Lista est√°tica mant√©m refer√™ncias vivas para todos os objetos
        // Isso causa vazamento de mem√≥ria porque o GC nunca pode coletar estes objetos
        // Cada objeto adicionado aqui fica "imortal" at√© o processo terminar
        private static List<DataProcessor> allProcessors = new List<DataProcessor>();
        
        public DataProcessor(int dataSize)
        {
            data = new int[dataSize];
            
            // Inicializa com dados para simular processamento real
            for (int i = 0; i < dataSize; i++)
            {
                data[i] = i * 2;
            }
            
            // PROBLEMA: Adicionamos refer√™ncia est√°tica que nunca √© removida
            // Isso impede que o GC colete este objeto, mesmo quando n√£o h√° outras refer√™ncias
            allProcessors.Add(this);
            
            Console.WriteLine($"‚úì Alocados {dataSize * sizeof(int)} bytes de mem√≥ria (objeto #{allProcessors.Count})");
        }
        
        public void ProcessData()
        {
            long sum = 0;
            for (int i = 0; i < data.Length; i++)
            {
                sum += data[i];
            }
            Console.WriteLine($"  ‚Üí Soma calculada: {sum} (processando {data.Length} elementos)");
        }
        
        public static int GetProcessorCount()
        {
            return allProcessors.Count;
        }
        
        // M√©todo para demonstrar que os objetos ainda est√£o vivos
        public static void ShowMemoryUsage()
        {
            long totalMemory = 0;
            foreach (var processor in allProcessors)
            {
                if (processor.data != null)
                {
                    totalMemory += processor.data.Length * sizeof(int);
                }
            }
            
            Console.WriteLine($"üìä Objetos vivos: {allProcessors.Count}");
            Console.WriteLine($"üìä Mem√≥ria total ocupada: ‚âà{totalMemory:N0} bytes");
        }
    }
    
    internal class Program
    {
        private static void Main(string[] args)
        {
            Console.WriteLine("================================================");
            Console.WriteLine("  BEM-VINDO √Ä DEMONSTRA√á√ÉO DE VAZAMENTO DE MEM√ìRIA");
            Console.WriteLine("================================================");
            Console.WriteLine();
            Console.WriteLine("Este programa demonstra problemas comuns de vazamento");
            Console.WriteLine("de mem√≥ria em C# para fins educacionais.");
            Console.WriteLine();
            Console.WriteLine("IMPORTANTE: Use ferramentas de profiling para observar");
            Console.WriteLine("           o comportamento da mem√≥ria em tempo real!");
            Console.WriteLine();
            
            ListCommands();
            ClearFiles();
            
            var command = Console.ReadLine();
            while (command?.ToLower() != "x")
            {
                Console.WriteLine();
                
                switch (command?.ToLower())
                {
                    case "list":
                        ListCommands();
                        break;
                    case "bad memory":
                        BadMemoryAllocation();
                        break;
                    case "bad file":
                        BadFileHandling();
                        break;
                    case "force collection":
                        ForceCollection();
                        break;
                    case "clear files":
                        ClearFiles();
                        break;
                    case "":
                        Console.WriteLine("‚ö†Ô∏è  Comando vazio. Digite 'list' para ver os comandos dispon√≠veis.");
                        break;
                    default:
                        Console.WriteLine($"‚ùå Comando desconhecido: '{command}'");
                        Console.WriteLine("   Digite 'list' para ver todos os comandos dispon√≠veis.");
                        break;
                }
                
                Console.WriteLine();
                Console.WriteLine("Digite seu pr√≥ximo comando:");
                command = Console.ReadLine();
            }
            
            Console.WriteLine();
            Console.WriteLine("================================================");
            Console.WriteLine("  PROGRAMA FINALIZADO");
            Console.WriteLine("================================================");
            Console.WriteLine();
            Console.WriteLine("RESUMO DOS PROBLEMAS DEMONSTRADOS:");
            Console.WriteLine("‚Ä¢ Lista est√°tica impede coleta pelo GC");
            Console.WriteLine("‚Ä¢ FileStream/StreamWriter sem using statements");
            Console.WriteLine("‚Ä¢ Objetos acumulam indefinidamente na mem√≥ria");
            Console.WriteLine("‚Ä¢ Handles de arquivo n√£o liberados adequadamente");
            Console.WriteLine();
            Console.WriteLine($"ATEN√á√ÉO: {DataProcessor.GetProcessorCount()} objetos permanecem na mem√≥ria!");
            Console.WriteLine("         Eles s√≥ ser√£o liberados quando o processo terminar.");
            Console.WriteLine();
            Console.WriteLine("Para ver as solu√ß√µes, execute: example2-memory-leak-solved.cs");
            Console.WriteLine();
        }
        
        /// <summary>
        /// Exibe para o usu√°rio uma listagem dos comandos dispon√≠veis
        /// </summary>
        private static void ListCommands()
        {
            Console.WriteLine();
            Console.WriteLine("========================================");
            Console.WriteLine("  COMANDOS DISPON√çVEIS PARA TESTE");
            Console.WriteLine("========================================");
            Console.WriteLine("list            = Mostra esta listagem de a√ß√µes");
            Console.WriteLine();
            Console.WriteLine("-- Helpers de Garbage Collection --");
            Console.WriteLine("force collection = For√ßa o garbage collector a executar");
            Console.WriteLine();
            Console.WriteLine("-- Exemplos de Vazamento de Mem√≥ria --");
            Console.WriteLine("bad memory      = Demonstra vazamento com 1000 objetos (‚âà40MB)");
            Console.WriteLine("bad file        = Demonstra vazamento de handles (100 arquivos)");
            Console.WriteLine();
            Console.WriteLine("-- Utilit√°rios de Limpeza --");
            Console.WriteLine("clear files     = Remove arquivos de teste criados");
            Console.WriteLine();
            Console.WriteLine("DICA: Use ferramentas de profiling para observar os vazamentos!");
            Console.WriteLine("      Visual Studio: Debug ‚Üí Windows ‚Üí Show Diagnostic Tools");
            Console.WriteLine("      Ou use dotMemory, PerfView, Application Insights");
            Console.WriteLine();
            Console.WriteLine("Digite 'X' para sair");
            Console.WriteLine("========================================");
        }
        
        #region Garbage Collection
        
        /// <summary>
        /// For√ßa o garbage collector a executar, durante a demo pode ser √∫til para 
        /// demonstrar que objetos com refer√™ncias est√°ticas n√£o s√£o coletados
        /// </summary>
        private static void ForceCollection()
        {
            Console.WriteLine("üîÑ FOR√áANDO GARBAGE COLLECTION...");
            Console.WriteLine();
            
            // Mostra estado antes da coleta
            long memoryBefore = GC.GetTotalMemory(false);
            Console.WriteLine($"üìä Mem√≥ria antes do GC: {memoryBefore:N0} bytes");
            DataProcessor.ShowMemoryUsage();
            
            Console.WriteLine();
            Console.WriteLine("Executando GC.Collect()...");
            
            // For√ßa coleta completa
            GC.Collect();
            GC.WaitForPendingFinalizers();
            GC.Collect();
            
            Thread.Sleep(100); // Aguarda um pouco para garantir que o GC terminou
            
            // Mostra estado depois da coleta
            long memoryAfter = GC.GetTotalMemory(false);
            Console.WriteLine($"üìä Mem√≥ria depois do GC: {memoryAfter:N0} bytes");
            Console.WriteLine($"üìä Diferen√ßa: {memoryAfter - memoryBefore:N0} bytes");
            
            Console.WriteLine();
            DataProcessor.ShowMemoryUsage();
            
            Console.WriteLine();
            Console.WriteLine("üö® PROBLEMA DEMONSTRADO:");
            Console.WriteLine("   Mesmo ap√≥s for√ßar o GC, os objetos DataProcessor n√£o foram coletados!");
            Console.WriteLine("   Isso acontece porque a lista est√°tica mant√©m refer√™ncias vivas.");
            Console.WriteLine("   O GC n√£o pode coletar objetos que ainda t√™m refer√™ncias ativas.");
            Console.WriteLine();
            Console.WriteLine("NOTA: Execute 'bad memory' algumas vezes, depois 'force collection'");
            Console.WriteLine("      e observe que o n√∫mero de objetos nunca diminui!");
        }
        
        #endregion
        
        #region Memory Leaks
        
        /// <summary>
        /// Demonstra vazamento de mem√≥ria criando objetos que s√£o mantidos vivos 
        /// por refer√™ncias est√°ticas, impedindo que o GC os colete
        /// </summary>
        /// <remarks>
        /// Embora este seja um exemplo extremo, considere as implica√ß√µes no mundo real 
        /// de um site de alto tr√°fego com cole√ß√µes est√°ticas que crescem indefinidamente.
        /// Isso pode se acumular rapidamente e causar problemas de performance e OutOfMemoryException.
        /// </remarks>
        private static void BadMemoryAllocation()
        {
            Console.WriteLine("üî¥ INICIANDO DEMONSTRA√á√ÉO DE VAZAMENTO DE MEM√ìRIA");
            Console.WriteLine("   Criando 1000 objetos DataProcessor com 10.000 inteiros cada...");
            Console.WriteLine("   Mem√≥ria total que ser√° 'vazada': ‚âà40MB");
            Console.WriteLine();
            
            int objectsCreated = 0;
            
            // PROBLEMA PRINCIPAL: Criamos muitos objetos que ficam na lista est√°tica
            // Isso impede que o GC colete os objetos, causando vazamento efetivo
            for (int i = 0; i < 1000; i++)
            {
                var processor = new DataProcessor(10000);
                processor.ProcessData();
                objectsCreated++;
                
                // Mostra progresso a cada 100 objetos
                if (objectsCreated % 100 == 0)
                {
                    Console.WriteLine($"  Criados {objectsCreated} objetos...");
                }
            }
            
            Console.WriteLine();
            Console.WriteLine("‚úÖ Completadas 1000 aloca√ß√µes de mem√≥ria");
            Console.WriteLine("üö® PROBLEMA CR√çTICO: Objetos nunca ser√£o coletados pelo GC!");
            Console.WriteLine();
            Console.WriteLine("DETALHES DO VAZAMENTO:");
            Console.WriteLine($"‚Ä¢ {DataProcessor.GetProcessorCount()} objetos DataProcessor na lista est√°tica");
            Console.WriteLine("‚Ä¢ Cada objeto cont√©m array de 10.000 inteiros (‚âà40KB)");
            Console.WriteLine("‚Ä¢ Lista est√°tica impede coleta pelo Garbage Collector");
            Console.WriteLine("‚Ä¢ Total 'vazado': ‚âà40MB que permanece na mem√≥ria indefinidamente");
            Console.WriteLine("‚Ä¢ Objetos ficam 'imortais' at√© o processo terminar");
            Console.WriteLine();
            Console.WriteLine("IMPACTO NO SISTEMA:");
            Console.WriteLine("‚Ä¢ Mem√≥ria cresce continuamente a cada execu√ß√£o");
            Console.WriteLine("‚Ä¢ Em aplica√ß√µes reais, pode causar OutOfMemoryException");
            Console.WriteLine("‚Ä¢ Performance degrada com o tempo (GC pressure)");
            Console.WriteLine("‚Ä¢ Pode causar pagina√ß√£o excessiva em sistemas com pouca RAM");
            Console.WriteLine();
            Console.WriteLine("NOTA: Execute este comando m√∫ltiplas vezes e depois 'force collection'");
            Console.WriteLine("      Observe que os objetos nunca s√£o coletados!");
        }
        
        #endregion
        
        #region File Handles
        
        /// <summary>
        /// Demonstra vazamento de handles de arquivo abrindo arquivos sem usar 
        /// using statements, resultando em muitos handles sendo deixados abertos
        /// </summary>
        /// <remarks>
        /// Al√©m dos problemas de mem√≥ria com o exemplo, a maioria destes arquivos 
        /// tamb√©m mostrar√° "Em uso por outro processo" se tentarem ser modificados.
        /// Como tal, √© importante notar que voc√™ pode n√£o conseguir executar este 
        /// exemplo 2x seguidas sem reiniciar o programa.
        /// </remarks>
        private static void BadFileHandling()
        {
            Console.WriteLine("üî¥ INICIANDO DEMONSTRA√á√ÉO DE VAZAMENTO DE HANDLES DE ARQUIVO");
            Console.WriteLine("   Abrindo 100 arquivos sem usar using statements...");
            Console.WriteLine();
            
            if (!Directory.Exists("badfile")) 
                Directory.CreateDirectory("badfile");
            
            int successfulCreations = 0;
            int failedCreations = 0;
            
            for (int i = 0; i < 100; i++)
            {
                try
                {
                    WriteFileBad(i);
                    successfulCreations++;
                    
                    // Mostra progresso a cada 20 arquivos
                    if ((i + 1) % 20 == 0)
                    {
                        Console.WriteLine($"  Processados {i + 1} arquivos...");
                    }
                }
                catch (Exception ex)
                {
                    failedCreations++;
                    Console.WriteLine($"  ‚ö†Ô∏è  Erro no arquivo {i}: {ex.Message}");
                }
            }
            
            Console.WriteLine();
            Console.WriteLine("‚úÖ Processo conclu√≠do:");
            Console.WriteLine($"   ‚Ä¢ Arquivos criados com sucesso: {successfulCreations}");
            Console.WriteLine($"   ‚Ä¢ Falhas na cria√ß√£o: {failedCreations}");
            Console.WriteLine();
            Console.WriteLine("üö® PROBLEMA CR√çTICO: Handles de arquivo nunca foram liberados!");
            Console.WriteLine();
            Console.WriteLine("DETALHES DO VAZAMENTO:");
            Console.WriteLine($"‚Ä¢ {successfulCreations} FileStream e StreamWriter n√£o foram disposed");
            Console.WriteLine("‚Ä¢ Cada handle consome recursos do sistema operacional");
            Console.WriteLine("‚Ä¢ Arquivos ficam 'travados' - mostram 'em uso por outro processo'");
            Console.WriteLine("‚Ä¢ Sistema tem limite m√°ximo de handles por processo");
            Console.WriteLine("‚Ä¢ Pode causar IOException: 'Too many open files'");
            Console.WriteLine();
            Console.WriteLine("IMPACTO NO SISTEMA:");
            Console.WriteLine("‚Ä¢ Windows: Limite t√≠pico de 2048 handles por processo");
            Console.WriteLine("‚Ä¢ Linux: Limite configur√°vel (ulimit -n), t√≠pico 1024");
            Console.WriteLine("‚Ä¢ Ap√≥s atingir limite, cria√ß√£o de arquivos falhar√°");
            Console.WriteLine("‚Ä¢ Outros processos podem ser afetados");
            Console.WriteLine();
            Console.WriteLine("TESTE: Tente abrir alguns arquivos em 'badfile/' com editor de texto");
            Console.WriteLine("       Voc√™ ver√° erro 'arquivo em uso por outro processo'!");
        }
        
        /// <summary>
        /// Implementa√ß√£o interna de escrita de um √∫nico arquivo - COM PROBLEMA
        /// </summary>
        /// <param name="fileNumber"></param>
        private static void WriteFileBad(int fileNumber)
        {
            try
            {
                // PROBLEMA CR√çTICO: Criamos FileStream e StreamWriter mas n√£o os liberamos
                // Isso causa vazamento de handles de arquivo - um recurso limitado do sistema
                var fs = new FileStream($"badfile/{fileNumber}-example.txt", FileMode.OpenOrCreate, FileAccess.ReadWrite);
                var writer = new StreamWriter(fs);
                
                writer.WriteLine($"Arquivo {fileNumber} - Este handle nunca ser√° fechado!");
                writer.WriteLine("Conte√∫do adicional para simular uso real do arquivo.");
                writer.WriteLine("PROBLEMA: Dispose() nunca √© chamado!");
                writer.WriteLine($"Criado em: {DateTime.Now}");
                
                // PROBLEMA: Nunca chamamos Dispose() ou usamos using statements!
                // Os handles ficam abertos indefinidamente, consumindo recursos do sistema
                // 
                // SOLU√á√ÉO seria:
                // fs.Dispose();
                // writer.Dispose();
                // 
                // Ou melhor ainda, usar using statements:
                // using var fs = new FileStream(...);
                // using var writer = new StreamWriter(fs);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Erro ao criar arquivo {fileNumber}: {ex.Message}");
            }
        }
        
        private static void ClearFiles()
        {
            Console.WriteLine("üßπ LIMPANDO ARQUIVOS DE TESTE...");
            
            try
            {
                if (Directory.Exists("badfile"))
                {
                    // Tenta remover arquivos individuais primeiro
                    string[] files = Directory.GetFiles("badfile");
                    int removedFiles = 0;
                    int lockedFiles = 0;
                    
                    foreach (string file in files)
                    {
                        try
                        {
                            File.Delete(file);
                            removedFiles++;
                        }
                        catch (IOException)
                        {
                            lockedFiles++;
                            // Arquivo provavelmente est√° com handle aberto
                        }
                    }
                    
                    Console.WriteLine($"‚úÖ Arquivos removidos: {removedFiles}");
                    
                    if (lockedFiles > 0)
                    {
                        Console.WriteLine($"‚ö†Ô∏è  Arquivos travados: {lockedFiles}");
                        Console.WriteLine("   Estes arquivos t√™m handles abertos (demonstra√ß√£o do vazamento!)");
                        Console.WriteLine("   Eles s√≥ podem ser removidos ap√≥s o programa terminar.");
                    }
                    
                    // Tenta remover o diret√≥rio se estiver vazio
                    try
                    {
                        Directory.Delete("badfile", false);
                        Console.WriteLine("‚úÖ Diret√≥rio 'badfile' removido");
                    }
                    catch (IOException)
                    {
                        Console.WriteLine("‚ÑπÔ∏è  Diret√≥rio 'badfile' mantido (cont√©m arquivos travados)");
                    }
                }
                else
                {
                    Console.WriteLine("‚ÑπÔ∏è  Nenhum arquivo de teste encontrado");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"‚ùå Erro ao limpar arquivos: {ex.Message}");
            }
            
            Console.WriteLine();
        }
        
        #endregion
    }
}